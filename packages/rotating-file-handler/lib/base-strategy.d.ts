import { MaxAgeStrategyOptions } from './max-age-strategy.js';
import { MaxSizeStrategyOptions } from './max-size-strategy.js';
import { RotationStrategyInterface } from './rotation-strategy.js';
/**
 * Common functionality for all `RotatingFileHandler` strategies
 */
export declare abstract class BaseStrategy<T extends MaxAgeStrategyOptions | MaxSizeStrategyOptions> implements RotationStrategyInterface {
    protected directory: string;
    protected filenameTemplate: string;
    protected threshold: T['threshold'];
    constructor(directory: string, filenameTemplate: string, threshold: T['threshold']);
    /**
     * @inheritdoc
     */
    abstract getCurrentFilename(): string;
    /**
     * @inheritdoc
     */
    abstract shouldRotate(): boolean;
    /**
     * @inheritdoc
     */
    abstract rotate(maxFiles: number): void;
    /**
     * Compare (as in a custom sort callback) two filenames so that the older one goes first and the more recent one goes after
     * This is used to sort existing log files and delete the older ones
     *
     * @param a
     * @param b
     */
    protected abstract compareFilenames(a: string, b: string): number;
    /**
     * Get a regular expression that matches log files generated by this strategy
     */
    protected abstract getFilenameRegex(): RegExp;
    /**
     * Get a list of existing log files, sorted by recency
     */
    protected getExistingFiles(): string[];
    /**
     * Delete files that are no longer needed according to `maxFiles`
     *
     * @param maxFiles The number of log files to keep
     */
    protected deleteSurplusFiles(maxFiles: number): void;
}

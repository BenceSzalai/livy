#!/usr/bin/env node
const fs = require('fs')
const { promisify } = require('util')
const yufka = require('yufka')
const { extname, join } = require('path')
const { packageDir, argv } = require('./_helpers')

const verbose = argv.verbose || argv.v

/**
 * Recursively add an .mjs extension to imports
 *
 * @param {string} path The folder inside the package to scan for .mjs files
 */
async function fixExtensionlessImports(path) {
  if (verbose) {
    console.log(`🔦 Scan ${join(process.cwd(), path)}`)
  }

  const fileNames = await promisify(fs.readdir)(path)
  const stat = promisify(fs.stat)
  const files = (
    await Promise.all(fileNames.map(name => stat(join(path, name))))
  ).map((stats, index) => {
    stats.name = fileNames[index]
    return stats
  })

  const handledFiles = []

  for (const file of files) {
    const extension = extname(file.name)
    const filePath = join(path, file.name)

    if (file.isDirectory()) {
      handledFiles.push(fixExtensionlessImports(filePath))
    } else if (file.isFile() && extension === '.mjs') {
      handledFiles.push(
        fs.promises.readFile(filePath, 'utf8').then(source => {
          if (verbose) {
            console.log(`✏️  ${file.name}`)
          }

          return fs.promises.writeFile(
            filePath,
            yufka(
              source,
              { acorn: { sourceType: 'module' } },
              (node, { update, source, parent }) => {
                if (
                  node.type === 'Literal' &&
                  [
                    'ImportExpression',
                    'ImportDeclaration',
                    'ExportAllDeclaration',
                    'ExportNamedDeclaration'
                  ].includes(parent().type) &&
                  parent().source === node &&
                  !node.value.endsWith('.js') &&
                  !node.value.endsWith('.mjs') &&
                  (/^@livy\/[^/]+\//.test(node.value) ||
                    node.value.startsWith('./') ||
                    node.value.startsWith('../'))
                ) {
                  update(node.raw.slice(0, -1) + '.mjs' + node.raw.slice(-1))
                }
              }
            ).toString()
          )
        })
      )
    }
  }

  await Promise.all(handledFiles)
}

fixExtensionlessImports(join(packageDir, argv._[0] || '.')).catch(console.error)

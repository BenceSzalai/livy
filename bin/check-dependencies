#!/usr/bin/env node

/**
 * Check whether all modules imported in the source code of a
 * package are defined as dependencies in its package.json.
 * This is particularly important in the monorepo approach as tests
 * won't show a failure when using dependencies of other packages.
 *
 * TODO: This check should eventually be moved into a custom ESLint rule
 */

const { argv, root, packageDir } = require('./_helpers')

const fs = require('fs')
const { promisify } = require('util')
const chalk = require('chalk')
const yufka = require('yufka')
const { dirname, basename, extname, join, resolve, relative } = require('path')
const builtinModules = require('builtin-modules')

/**
 * The folder to scan in the checked package (defaults to ./)
 */
const sourcePath = resolve(packageDir, 'src')

/**
 * Get the package name from an import path
 *
 * @param path The encountered import path
 */
function getPackageName(path) {
  const [namespace, name] = path.split('/')
  return namespace.startsWith('@') ? `${namespace}/${name}` : namespace
}

const pkg = require(join(packageDir, 'package.json'))

/**
 * Dependencies of the currently handled package
 */
const dependencies = Object.keys(pkg.dependencies || {})
const devDependencies = Object.keys(pkg.devDependencies || {})
const allDependencies = Object.keys({
  ...pkg.dependencies,
  ...pkg.devDependencies
})

/**
 * @type Map<string, { devOnly: boolean, files: Map<string, acorn.Node[] }>>
 */
const undeclaredDependencies = new Map()

const verbose = argv.verbose || argv.v

/**
 * Get import source nodes in a file
 *
 * @param source         The source code to parse
 * @param yufkaOptions Options for the yufka traverser
 */
function getImportSourceNodes(source, yufkaOptions = {}) {
  /**
   * @types Map<string, acorn.Node[]>
   */
  const sources = new Map()

  yufka(source, yufkaOptions, node => {
    if (
      [
        'ImportExpression',
        'ImportDeclaration',
        'ExportAllDeclaration',
        'ExportNamedDeclaration'
      ].includes(node.type) &&
      node.source &&
      !node.source.value.startsWith('.')
    ) {
      const packageName = getPackageName(node.source.value)

      if (!sources.has(packageName)) {
        sources.set(packageName, [])
      }
      sources.get(packageName).push(node)
    }
  })

  return sources
}

/**
 * Recursively check .ts files inside the configured directory
 *
 * @param {string|undefined} path The folder inside the package to scan for .ts files
 */
async function checkDependencies(path) {
  if (verbose) {
    console.log(
      chalk`🔦 Scan {cyan ${relative(root, resolve(packageDir, path))}}`
    )
  }

  if (typeof path !== 'string') {
    path = sourcePath
  }

  const fileNames = await promisify(fs.readdir)(path)
  const stat = promisify(fs.stat)
  const files = (
    await Promise.all(fileNames.map(name => stat(join(path, name))))
  ).map((stats, index) => {
    stats.name = fileNames[index]
    return stats
  })

  const handledFiles = []

  for (const file of files) {
    const extension = extname(file.name)
    const filePath = resolve(packageDir, path, file.name)

    if (file.isDirectory()) {
      handledFiles.push(checkDependencies(filePath))
    } else if (file.isFile() && extension === '.ts') {
      handledFiles.push(
        fs.promises.readFile(filePath, 'utf8').then(async source => {
          if (verbose) {
            console.log(`🔎 ${file.name}`)
          }

          const importSourceNodesTs = getImportSourceNodes(source, {
            acorn: {
              sourceType: 'module',
              plugins: ['typescript', 'classProperties']
            },
            parser: require('@babel/parser')
          })

          const missingImportSourceNodesTs = [...importSourceNodesTs].filter(
            ([package]) =>
              !builtinModules.includes(package) &&
              !dependencies.includes(package)
          )

          // There are missing dependencies, check compiled file to exclude missing types
          if (missingImportSourceNodesTs.length > 0) {
            const compiledName = basename(filePath, '.ts') + '.mjs'
            const compiledPath = resolve(
              packageDir,
              'lib',
              relative(sourcePath, dirname(filePath)),
              compiledName
            )

            if (verbose) {
              console.log(`🔎 ${compiledName}`)
            }

            const compiledSource = await fs.promises.readFile(
              compiledPath,
              'utf8'
            )

            const importSourceNodesMjs = getImportSourceNodes(compiledSource, {
              acorn: { sourceType: 'module' }
            })

            for (const [package, nodes] of missingImportSourceNodesTs) {
              // Missing dependency still used in compiled output
              const isMissingDependency = importSourceNodesMjs.has(package)

              // Missing dependency is not used in compiled output (i.e. only types where used)
              // but it's still not in devDependencies or types
              const isMissingDevDependency =
                !isMissingDependency &&
                !devDependencies.includes(package) &&
                !allDependencies.includes(`@types/${package}`)

              if (isMissingDependency || isMissingDevDependency) {
                let missingDependencyObject

                if (!undeclaredDependencies.has(package)) {
                  missingDependencyObject = {
                    devOnly: isMissingDevDependency,
                    files: new Map()
                  }
                  undeclaredDependencies.set(package, missingDependencyObject)
                } else {
                  missingDependencyObject = undeclaredDependencies.get(package)
                }

                // It's `devOnly` if it was previously and still is
                missingDependencyObject.devOnly =
                  missingDependencyObject.devOnly && isMissingDevDependency

                if (!missingDependencyObject.files.has(filePath)) {
                  missingDependencyObject.files.set(filePath, nodes)
                }
              }
            }
          }
        })
      )
    }
  }

  await Promise.all(handledFiles)
}

// Run check and output result
checkDependencies(sourcePath)
  .then(() => {
    const output = []
    if (undeclaredDependencies.size > 0) {
      failed = true
      for (const [packageName, { devOnly, files }] of undeclaredDependencies) {
        if (devOnly) {
          output.push(
            chalk`⚠️  Undeclared dev dependency {cyan ${packageName}}`
          )
        } else {
          output.push(chalk`⚠️  Undeclared dependency {cyan ${packageName}}`)
        }

        if (verbose) {
          for (const [file, nodes] of files) {
            for (const node of nodes) {
              output.push(
                chalk`- ${relative(packageDir, file)}{dim :${
                  node.loc.start.line
                }}`
              )
            }
          }
        }
      }
      throw output.join('\n')
    }
  })
  .catch(error => {
    console.error(error)
    process.exit(1)
  })
